DeterminePaletteID (1c:5f97)
	Given a pokemon/trainer in A, it returns the appropriate palette.
	DeterminePaletteID_NoStatusCheck (as I call it) is usually preferable.

f:6fb8: battle initialization function.

1c:5ddf: Called from GoPAL_SET.
	It accepts a "command" in b. It jumps to index b in a table at 5F73. Values:
		00 = Set black palettes at beginning of battle
		01 = Set proper palettes for pokemon/trainers in battle
		02 = Map
		03 = Pokemon status
		04 = Show pokedex data
		05 = Slots
		06 = Set titlescreen palettes
		07 = Called before intro
		08 = Open pokedex
		09 = Load maps
		0A = Load pokemon menu
		0C = first screen
		0D = Trainer card
		FC = Called 6 times when loading pokemon menu (before 0A).
		FF = Use code [cf1c] instead. Useful for reloading after a menu clears something.

1c:5fb6: For code FC. Determines lifebar color for one of 6 pokemon.

1c:616d = Unused GBC Code?

0f:60df = function where lifebar is moved down. Returns when finished.
03:7a1d = Function where lifebar is decreased.

1c:4b5d = Flashing palette before battle

1e:4e11 = growl / screen shake function. There's a problem, present in the original, where it updates winX/winY in the middle of rendering.

attack data copied to $cfd2

Func_78e23 modifies palettes when attacking (when in SGB Mode) so sprites are just black and white
1e:4000 looks key to set battle attack colors.

Locations where FF68 is set to black/white only: (bank 1e)
	- 5c7a, !5c87, 416a, !4176 (for Razor Leaf)
	- 416a (release from pokeball)
	- !4176 (revert after pokeball)
	- 4e23 (ish)

TODO

- Intro colors (glitches, prof oak speech)
- Dynamic lifebar colors
- Check town tilesets
- Change box: pokeball colors
- Wrap up attacks
- Double-check palettes imported from yellow
- Slots

POKEMON YELLOW:

1:DEE3 = location of pokemon's palette (palette id 1)
1c:6af9 = location of pokemon yellow's palette data (at least for GBC Mode)
